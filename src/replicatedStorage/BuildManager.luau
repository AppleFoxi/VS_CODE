-- BuildManager (ModuleScript –≤ ReplicatedStorage)
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local PhysicsService = game:GetService("PhysicsService")
local player = Players.LocalPlayer
local mouse = player:GetMouse()

local BuildManager = {}
local remoteEvent = ReplicatedStorage:WaitForChild("BuildBlockEvent")

-- –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
local previewBlock = nil
local canBuild = false
local isBuildingMode = false
local currentBlockType = nil
local connection = nil
local mouseConnection = nil
local gridSize = 4
local lastBuildTime = 0
local COOLDOWN_TIME = 0.5

-- –§—É–Ω–∫—Ü–∏—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –ø–æ —Å–µ—Ç–∫–µ
local function snapToGrid(position)
    return Vector3.new(
        math.floor(position.X / gridSize) * gridSize + gridSize/2,
        math.floor(position.Y / gridSize) * gridSize + gridSize/2,
        math.floor(position.Z / gridSize) * gridSize + gridSize/2
    )
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
local function getBuildPosition()
    if not mouse.Target then return nil end
    
    if player.Character and mouse.Target:IsDescendantOf(player.Character) then
        return nil
    end
    
    local hitPosition = mouse.Hit.Position
    local surfaceNormal = mouse.TargetSurface
    
    local offset = Vector3.new(0, gridSize/2, 0)
    if surfaceNormal == Enum.NormalId.Front then
        offset = Vector3.new(0, 0, gridSize/2)
    elseif surfaceNormal == Enum.NormalId.Back then
        offset = Vector3.new(0, 0, -gridSize/2)
    elseif surfaceNormal == Enum.NormalId.Right then
        offset = Vector3.new(gridSize/2, 0, 0)
    elseif surfaceNormal == Enum.NormalId.Left then
        offset = Vector3.new(-gridSize/2, 0, 0)
    elseif surfaceNormal == Enum.NormalId.Bottom then
        offset = Vector3.new(0, -gridSize/2, 0)
    end
    
    return snapToGrid(hitPosition + offset)
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–Ω–æ –ª–∏ —Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ —ç—Ç–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
local function canBuildOnSurface()
    if not mouse.Target then return false end
    return mouse.TargetSurface ~= Enum.NormalId.Bottom
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π
local function checkCollision(position)
    local testPart = Instance.new("Part")
    testPart.Size = Vector3.new(gridSize - 0.2, gridSize - 0.2, gridSize - 0.2)
    testPart.Position = position
    testPart.Anchored = true
    testPart.CanCollide = false
    testPart.Transparency = 1
    testPart.Parent = workspace

    local ignoreList = {testPart}
    if player.Character then
        for _, part in ipairs(player.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                table.insert(ignoreList, part)
            end
        end
    end

    local touchingParts = testPart:GetTouchingParts()
    for _, part in ipairs(touchingParts) do
        if part.Transparency < 0.5 and part.CanCollide then
            testPart:Destroy()
            return true
        end
    end
    testPart:Destroy()
    return false
end

-- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
local function createPreview()
    if previewBlock then previewBlock:Destroy() end

    previewBlock = Instance.new("Part")
    previewBlock.Size = Vector3.new(gridSize - 0.1, gridSize - 0.1, gridSize - 0.1)
    previewBlock.Transparency = 0.7
    previewBlock.Anchored = true
    previewBlock.CanCollide = false
    previewBlock.Material = Enum.Material.Neon
    previewBlock.Name = "BuildPreview"
    previewBlock.CanQuery = false
    previewBlock.Massless = true
    
    -- –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±–ª–æ–∫–∞
    if currentBlockType == "Stone" then
        previewBlock.Color = Color3.fromRGB(150, 150, 150)
    elseif currentBlockType == "Wood" then
        previewBlock.Color = Color3.fromRGB(139, 69, 19)
    elseif currentBlockType == "Glass" then
        previewBlock.Color = Color3.fromRGB(200, 200, 255)
        previewBlock.Transparency = 0.5
    elseif currentBlockType == "Metal" then
        previewBlock.Color = Color3.fromRGB(200, 200, 200)
    else
        previewBlock.Color = Color3.fromRGB(50, 255, 50)
    end
    
    -- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ collision groups
    pcall(function()
        if not PhysicsService:GetCollisionGroupName("Preview") then
            PhysicsService:CreateCollisionGroup("Preview")
            PhysicsService:CollisionGroupSetCollidable("Preview", "Default", false)
        end
        previewBlock.CollisionGroup = "Preview"
    end)
    
    previewBlock.Parent = workspace
    return previewBlock
end

-- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
local function updatePreview()
    if not previewBlock or not isBuildingMode then return end

    local buildPosition = getBuildPosition()
    if not buildPosition then
        previewBlock.Transparency = 1
        canBuild = false
        return
    end
    
    previewBlock.Position = buildPosition
    previewBlock.Transparency = 0.7
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ —Å—Ç—Ä–æ–∏—Ç—å
    local surfaceValid = canBuildOnSurface()
    local collisionFree = not checkCollision(buildPosition)
    
    canBuild = surfaceValid and collisionFree
    
    -- –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
    if canBuild then
        previewBlock.BrickColor = BrickColor.Green()
    elseif not surfaceValid then
        previewBlock.BrickColor = BrickColor.Red()
    else
        previewBlock.BrickColor = BrickColor.new("Bright orange")
    end
end

-- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
local function onMouseClick()
    if isBuildingMode and canBuild and (os.clock() - lastBuildTime) >= COOLDOWN_TIME then
        local buildPosition = getBuildPosition()
        if buildPosition then
            lastBuildTime = os.clock()
            remoteEvent:FireServer("buildBlock", currentBlockType, buildPosition)
            
            -- –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            if previewBlock then
                previewBlock.Transparency = 0.3
                delay(0.1, function()
                    if previewBlock and previewBlock.Parent then
                        previewBlock.Transparency = 0.7
                    end
                end)
            end
        end
    end
end

-- –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
function BuildManager.StartBuildingMode(blockType)
    if isBuildingMode then
        BuildManager.StopBuildingMode()
    end
    
    currentBlockType = blockType
    isBuildingMode = true
    createPreview()
    
    -- –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    connection = RunService.Heartbeat:Connect(updatePreview)
    
    -- –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ (–û–î–ò–ù –†–ê–ó)
    if not mouseConnection then
        mouseConnection = mouse.Button1Down:Connect(onMouseClick)
    end
    
    print("üèóÔ∏è –†–µ–∂–∏–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∑–∞–ø—É—â–µ–Ω: " .. blockType)
end

-- –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
function BuildManager.StopBuildingMode()
    isBuildingMode = false
    canBuild = false
    currentBlockType = nil
    
    if connection then
        connection:Disconnect()
        connection = nil
    end
    
    if previewBlock then
        previewBlock:Destroy()
        previewBlock = nil
    end
    
    print("üõë –†–µ–∂–∏–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
end

-- –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
function BuildManager.Cleanup()
    if connection then
        connection:Disconnect()
        connection = nil
    end
    
    if mouseConnection then
        mouseConnection:Disconnect()
        mouseConnection = nil
    end
    
    if previewBlock then
        previewBlock:Destroy()
        previewBlock = nil
    end
    
    isBuildingMode = false
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∂–∏–º–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
function BuildManager.IsBuilding()
    return isBuildingMode
end

return BuildManager